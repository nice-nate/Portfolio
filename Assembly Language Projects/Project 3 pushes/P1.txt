; Project 3                           (Source_Project_3.asm)

.386
.model flat,stdcall
.stack 4096
ExitProcess proto,dwExitCode:dword
Crlf PROTO
ReadInt PROTO
WriteInt PROTO
WriteString PROTO


.data
AlbTable dword 5 DUP(0)
Rowsize = ($ - AlbTable)
         dword 5 DUP(0) 
         dword 5 DUP(0)
         dword 5 DUP(0)
row_index sdword 0
column_index sdword 0
UT sdword 0

promptSAPR byte "Enter data for Salesperson (1-4)",0dh,0ah,0
promptUT byte "Enter data for Unit (1-1000000)",0dh,0ah,0
promptPT byte "Enter data for Product (1-5)",0dh,0ah,0
error byte "Value is not within range, please try again.",0dh,0ah,0

.code
main proc

;Prompts user to input data and assigns input to appropriate mem addresses -----------------

L1:
mov edx,OFFSET promptSAPR                          ;sets prompt to be used be WriteString
call WriteString                               ;acceptable input message

call ReadInt
jz err
sub eax,1
mov row_index,eax
call Crlf
cmp eax,4
jge err
cmp eax,0
jl pmem
push eax
mov edx,OFFSET promptUT                          ;sets prompt to be used be WriteString
call WriteString     

clc
call ReadInt
mov UT,eax
call Crlf
cmp eax,0
jl err
cmp eax,1000000
jge err

mov edx,OFFSET promptPT                          ;sets prompt to be used be WriteString
call WriteString     

call ReadInt
jz err
sub eax,1
mov column_index,eax
call Crlf
cmp eax,5
jge err
cmp eax,0
jl err
jmp L1

err:
mov edx,OFFSET error
call WriteString
call Crlf
jmp L1

;Prime memory address of target for data transfer ------------------------------------------

pmem:
pop row_index
mov ebx,OFFSET AlbTable                           ; table offset
mov eax,RowSize                                   ; size of row into eax
imul row_index                                    ; multiply by the amount of rows down
add ebx,eax                                       ; add that to the base register
mov ecx,4
mov eax,column_index
imul ecx
add ebx,eax                                       ; add the column size to the ebx register
mov eax,UT                                        ; place the unit value into eax register
mov [ebx],eax                                       ; move ebx into edi register for store instruction
mov eax,[ebx]
call WriteInt




                                             ;calculate apropriate cell location
                                             ;store info into appropriate cell number
                                             ;negative input to create report

;quit:                                       ;error message for invalid input
;mov edx,OFFSET error
;call WriteString

	invoke ExitProcess,0
main endp
end main